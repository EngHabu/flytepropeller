// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ExecutableTaskNodeStatus is an autogenerated mock type for the ExecutableTaskNodeStatus type
type ExecutableTaskNodeStatus struct {
	mock.Mock
}

type ExecutableTaskNodeStatus_GetBarrierClockTick struct {
	*mock.Call
}

func (_m ExecutableTaskNodeStatus_GetBarrierClockTick) Return(_a0 uint32) *ExecutableTaskNodeStatus_GetBarrierClockTick {
	return &ExecutableTaskNodeStatus_GetBarrierClockTick{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableTaskNodeStatus) OnGetBarrierClockTick() *ExecutableTaskNodeStatus_GetBarrierClockTick {
	c := _m.On("GetBarrierClockTick")
	return &ExecutableTaskNodeStatus_GetBarrierClockTick{Call: c}
}

func (_m *ExecutableTaskNodeStatus) OnGetBarrierClockTickMatch(matchers ...interface{}) *ExecutableTaskNodeStatus_GetBarrierClockTick {
	c := _m.On("GetBarrierClockTick", matchers...)
	return &ExecutableTaskNodeStatus_GetBarrierClockTick{Call: c}
}

// GetBarrierClockTick provides a mock function with given fields:
func (_m *ExecutableTaskNodeStatus) GetBarrierClockTick() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

type ExecutableTaskNodeStatus_GetPhase struct {
	*mock.Call
}

func (_m ExecutableTaskNodeStatus_GetPhase) Return(_a0 int) *ExecutableTaskNodeStatus_GetPhase {
	return &ExecutableTaskNodeStatus_GetPhase{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableTaskNodeStatus) OnGetPhase() *ExecutableTaskNodeStatus_GetPhase {
	c := _m.On("GetPhase")
	return &ExecutableTaskNodeStatus_GetPhase{Call: c}
}

func (_m *ExecutableTaskNodeStatus) OnGetPhaseMatch(matchers ...interface{}) *ExecutableTaskNodeStatus_GetPhase {
	c := _m.On("GetPhase", matchers...)
	return &ExecutableTaskNodeStatus_GetPhase{Call: c}
}

// GetPhase provides a mock function with given fields:
func (_m *ExecutableTaskNodeStatus) GetPhase() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type ExecutableTaskNodeStatus_GetPhaseVersion struct {
	*mock.Call
}

func (_m ExecutableTaskNodeStatus_GetPhaseVersion) Return(_a0 uint32) *ExecutableTaskNodeStatus_GetPhaseVersion {
	return &ExecutableTaskNodeStatus_GetPhaseVersion{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableTaskNodeStatus) OnGetPhaseVersion() *ExecutableTaskNodeStatus_GetPhaseVersion {
	c := _m.On("GetPhaseVersion")
	return &ExecutableTaskNodeStatus_GetPhaseVersion{Call: c}
}

func (_m *ExecutableTaskNodeStatus) OnGetPhaseVersionMatch(matchers ...interface{}) *ExecutableTaskNodeStatus_GetPhaseVersion {
	c := _m.On("GetPhaseVersion", matchers...)
	return &ExecutableTaskNodeStatus_GetPhaseVersion{Call: c}
}

// GetPhaseVersion provides a mock function with given fields:
func (_m *ExecutableTaskNodeStatus) GetPhaseVersion() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

type ExecutableTaskNodeStatus_GetPluginState struct {
	*mock.Call
}

func (_m ExecutableTaskNodeStatus_GetPluginState) Return(_a0 []byte) *ExecutableTaskNodeStatus_GetPluginState {
	return &ExecutableTaskNodeStatus_GetPluginState{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableTaskNodeStatus) OnGetPluginState() *ExecutableTaskNodeStatus_GetPluginState {
	c := _m.On("GetPluginState")
	return &ExecutableTaskNodeStatus_GetPluginState{Call: c}
}

func (_m *ExecutableTaskNodeStatus) OnGetPluginStateMatch(matchers ...interface{}) *ExecutableTaskNodeStatus_GetPluginState {
	c := _m.On("GetPluginState", matchers...)
	return &ExecutableTaskNodeStatus_GetPluginState{Call: c}
}

// GetPluginState provides a mock function with given fields:
func (_m *ExecutableTaskNodeStatus) GetPluginState() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

type ExecutableTaskNodeStatus_GetPluginStateVersion struct {
	*mock.Call
}

func (_m ExecutableTaskNodeStatus_GetPluginStateVersion) Return(_a0 uint32) *ExecutableTaskNodeStatus_GetPluginStateVersion {
	return &ExecutableTaskNodeStatus_GetPluginStateVersion{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableTaskNodeStatus) OnGetPluginStateVersion() *ExecutableTaskNodeStatus_GetPluginStateVersion {
	c := _m.On("GetPluginStateVersion")
	return &ExecutableTaskNodeStatus_GetPluginStateVersion{Call: c}
}

func (_m *ExecutableTaskNodeStatus) OnGetPluginStateVersionMatch(matchers ...interface{}) *ExecutableTaskNodeStatus_GetPluginStateVersion {
	c := _m.On("GetPluginStateVersion", matchers...)
	return &ExecutableTaskNodeStatus_GetPluginStateVersion{Call: c}
}

// GetPluginStateVersion provides a mock function with given fields:
func (_m *ExecutableTaskNodeStatus) GetPluginStateVersion() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}
