// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	core "github.com/lyft/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/lyft/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// ExecutableBranchNode is an autogenerated mock type for the ExecutableBranchNode type
type ExecutableBranchNode struct {
	mock.Mock
}

// GetElse provides a mock function with given fields:
func (_m *ExecutableBranchNode) GetElse() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetElseFail provides a mock function with given fields:
func (_m *ExecutableBranchNode) GetElseFail() *core.Error {
	ret := _m.Called()

	var r0 *core.Error
	if rf, ok := ret.Get(0).(func() *core.Error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Error)
		}
	}

	return r0
}

// GetElseIf provides a mock function with given fields:
func (_m *ExecutableBranchNode) GetElseIf() []v1alpha1.ExecutableIfBlock {
	ret := _m.Called()

	var r0 []v1alpha1.ExecutableIfBlock
	if rf, ok := ret.Get(0).(func() []v1alpha1.ExecutableIfBlock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1alpha1.ExecutableIfBlock)
		}
	}

	return r0
}

// GetIf provides a mock function with given fields:
func (_m *ExecutableBranchNode) GetIf() v1alpha1.ExecutableIfBlock {
	ret := _m.Called()

	var r0 v1alpha1.ExecutableIfBlock
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutableIfBlock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableIfBlock)
		}
	}

	return r0
}
