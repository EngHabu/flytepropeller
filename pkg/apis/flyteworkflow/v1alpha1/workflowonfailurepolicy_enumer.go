// Code generated by "enumer --type WorkflowOnFailurePolicy --json --yaml --trimprefix=WorkflowOnFailurePolicy"; DO NOT EDIT.

//
package v1alpha1

import (
	"encoding/json"
	"fmt"
)

const _WorkflowOnFailurePolicyName = "FailImmediatelyFailAfterExecutableNodesComplete"

var _WorkflowOnFailurePolicyIndex = [...]uint8{0, 15, 47}

func (i WorkflowOnFailurePolicy) String() string {
	if i < 0 || i >= WorkflowOnFailurePolicy(len(_WorkflowOnFailurePolicyIndex)-1) {
		return fmt.Sprintf("WorkflowOnFailurePolicy(%d)", i)
	}
	return _WorkflowOnFailurePolicyName[_WorkflowOnFailurePolicyIndex[i]:_WorkflowOnFailurePolicyIndex[i+1]]
}

var _WorkflowOnFailurePolicyValues = []WorkflowOnFailurePolicy{0, 1}

var _WorkflowOnFailurePolicyNameToValueMap = map[string]WorkflowOnFailurePolicy{
	_WorkflowOnFailurePolicyName[0:15]:  0,
	_WorkflowOnFailurePolicyName[15:47]: 1,
}

// WorkflowOnFailurePolicyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func WorkflowOnFailurePolicyString(s string) (WorkflowOnFailurePolicy, error) {
	if val, ok := _WorkflowOnFailurePolicyNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to WorkflowOnFailurePolicy values", s)
}

// WorkflowOnFailurePolicyValues returns all values of the enum
func WorkflowOnFailurePolicyValues() []WorkflowOnFailurePolicy {
	return _WorkflowOnFailurePolicyValues
}

// IsAWorkflowOnFailurePolicy returns "true" if the value is listed in the enum definition. "false" otherwise
func (i WorkflowOnFailurePolicy) IsAWorkflowOnFailurePolicy() bool {
	for _, v := range _WorkflowOnFailurePolicyValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for WorkflowOnFailurePolicy
func (i WorkflowOnFailurePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for WorkflowOnFailurePolicy
func (i *WorkflowOnFailurePolicy) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("WorkflowOnFailurePolicy should be a string, got %s", data)
	}

	var err error
	*i, err = WorkflowOnFailurePolicyString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for WorkflowOnFailurePolicy
func (i WorkflowOnFailurePolicy) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for WorkflowOnFailurePolicy
func (i *WorkflowOnFailurePolicy) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = WorkflowOnFailurePolicyString(s)
	return err
}
