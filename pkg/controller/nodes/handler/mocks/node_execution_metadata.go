// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import types "k8s.io/apimachinery/pkg/types"
import v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
import v1alpha1 "github.com/lyft/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"

// NodeExecutionMetadata is an autogenerated mock type for the NodeExecutionMetadata type
type NodeExecutionMetadata struct {
	mock.Mock
}

type NodeExecutionMetadata_GetAnnotations struct {
	*mock.Call
}

func (_m NodeExecutionMetadata_GetAnnotations) Return(_a0 map[string]string) *NodeExecutionMetadata_GetAnnotations {
	return &NodeExecutionMetadata_GetAnnotations{Call: _m.Call.Return(_a0)}
}

func (_m *NodeExecutionMetadata) OnGetAnnotations() *NodeExecutionMetadata_GetAnnotations {
	c := _m.On("GetAnnotations")
	return &NodeExecutionMetadata_GetAnnotations{Call: c}
}

func (_m *NodeExecutionMetadata) OnGetAnnotationsMatch(matchers ...interface{}) *NodeExecutionMetadata_GetAnnotations {
	c := _m.On("GetAnnotations", matchers...)
	return &NodeExecutionMetadata_GetAnnotations{Call: c}
}

// GetAnnotations provides a mock function with given fields:
func (_m *NodeExecutionMetadata) GetAnnotations() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

type NodeExecutionMetadata_GetExecutionID struct {
	*mock.Call
}

func (_m NodeExecutionMetadata_GetExecutionID) Return(_a0 v1alpha1.WorkflowExecutionIdentifier) *NodeExecutionMetadata_GetExecutionID {
	return &NodeExecutionMetadata_GetExecutionID{Call: _m.Call.Return(_a0)}
}

func (_m *NodeExecutionMetadata) OnGetExecutionID() *NodeExecutionMetadata_GetExecutionID {
	c := _m.On("GetExecutionID")
	return &NodeExecutionMetadata_GetExecutionID{Call: c}
}

func (_m *NodeExecutionMetadata) OnGetExecutionIDMatch(matchers ...interface{}) *NodeExecutionMetadata_GetExecutionID {
	c := _m.On("GetExecutionID", matchers...)
	return &NodeExecutionMetadata_GetExecutionID{Call: c}
}

// GetExecutionID provides a mock function with given fields:
func (_m *NodeExecutionMetadata) GetExecutionID() v1alpha1.WorkflowExecutionIdentifier {
	ret := _m.Called()

	var r0 v1alpha1.WorkflowExecutionIdentifier
	if rf, ok := ret.Get(0).(func() v1alpha1.WorkflowExecutionIdentifier); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.WorkflowExecutionIdentifier)
	}

	return r0
}

type NodeExecutionMetadata_GetK8sServiceAccount struct {
	*mock.Call
}

func (_m NodeExecutionMetadata_GetK8sServiceAccount) Return(_a0 string) *NodeExecutionMetadata_GetK8sServiceAccount {
	return &NodeExecutionMetadata_GetK8sServiceAccount{Call: _m.Call.Return(_a0)}
}

func (_m *NodeExecutionMetadata) OnGetK8sServiceAccount() *NodeExecutionMetadata_GetK8sServiceAccount {
	c := _m.On("GetK8sServiceAccount")
	return &NodeExecutionMetadata_GetK8sServiceAccount{Call: c}
}

func (_m *NodeExecutionMetadata) OnGetK8sServiceAccountMatch(matchers ...interface{}) *NodeExecutionMetadata_GetK8sServiceAccount {
	c := _m.On("GetK8sServiceAccount", matchers...)
	return &NodeExecutionMetadata_GetK8sServiceAccount{Call: c}
}

// GetK8sServiceAccount provides a mock function with given fields:
func (_m *NodeExecutionMetadata) GetK8sServiceAccount() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type NodeExecutionMetadata_GetLabels struct {
	*mock.Call
}

func (_m NodeExecutionMetadata_GetLabels) Return(_a0 map[string]string) *NodeExecutionMetadata_GetLabels {
	return &NodeExecutionMetadata_GetLabels{Call: _m.Call.Return(_a0)}
}

func (_m *NodeExecutionMetadata) OnGetLabels() *NodeExecutionMetadata_GetLabels {
	c := _m.On("GetLabels")
	return &NodeExecutionMetadata_GetLabels{Call: c}
}

func (_m *NodeExecutionMetadata) OnGetLabelsMatch(matchers ...interface{}) *NodeExecutionMetadata_GetLabels {
	c := _m.On("GetLabels", matchers...)
	return &NodeExecutionMetadata_GetLabels{Call: c}
}

// GetLabels provides a mock function with given fields:
func (_m *NodeExecutionMetadata) GetLabels() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

type NodeExecutionMetadata_GetNamespace struct {
	*mock.Call
}

func (_m NodeExecutionMetadata_GetNamespace) Return(_a0 string) *NodeExecutionMetadata_GetNamespace {
	return &NodeExecutionMetadata_GetNamespace{Call: _m.Call.Return(_a0)}
}

func (_m *NodeExecutionMetadata) OnGetNamespace() *NodeExecutionMetadata_GetNamespace {
	c := _m.On("GetNamespace")
	return &NodeExecutionMetadata_GetNamespace{Call: c}
}

func (_m *NodeExecutionMetadata) OnGetNamespaceMatch(matchers ...interface{}) *NodeExecutionMetadata_GetNamespace {
	c := _m.On("GetNamespace", matchers...)
	return &NodeExecutionMetadata_GetNamespace{Call: c}
}

// GetNamespace provides a mock function with given fields:
func (_m *NodeExecutionMetadata) GetNamespace() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type NodeExecutionMetadata_GetOwnerID struct {
	*mock.Call
}

func (_m NodeExecutionMetadata_GetOwnerID) Return(_a0 types.NamespacedName) *NodeExecutionMetadata_GetOwnerID {
	return &NodeExecutionMetadata_GetOwnerID{Call: _m.Call.Return(_a0)}
}

func (_m *NodeExecutionMetadata) OnGetOwnerID() *NodeExecutionMetadata_GetOwnerID {
	c := _m.On("GetOwnerID")
	return &NodeExecutionMetadata_GetOwnerID{Call: c}
}

func (_m *NodeExecutionMetadata) OnGetOwnerIDMatch(matchers ...interface{}) *NodeExecutionMetadata_GetOwnerID {
	c := _m.On("GetOwnerID", matchers...)
	return &NodeExecutionMetadata_GetOwnerID{Call: c}
}

// GetOwnerID provides a mock function with given fields:
func (_m *NodeExecutionMetadata) GetOwnerID() types.NamespacedName {
	ret := _m.Called()

	var r0 types.NamespacedName
	if rf, ok := ret.Get(0).(func() types.NamespacedName); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.NamespacedName)
	}

	return r0
}

type NodeExecutionMetadata_GetOwnerReference struct {
	*mock.Call
}

func (_m NodeExecutionMetadata_GetOwnerReference) Return(_a0 v1.OwnerReference) *NodeExecutionMetadata_GetOwnerReference {
	return &NodeExecutionMetadata_GetOwnerReference{Call: _m.Call.Return(_a0)}
}

func (_m *NodeExecutionMetadata) OnGetOwnerReference() *NodeExecutionMetadata_GetOwnerReference {
	c := _m.On("GetOwnerReference")
	return &NodeExecutionMetadata_GetOwnerReference{Call: c}
}

func (_m *NodeExecutionMetadata) OnGetOwnerReferenceMatch(matchers ...interface{}) *NodeExecutionMetadata_GetOwnerReference {
	c := _m.On("GetOwnerReference", matchers...)
	return &NodeExecutionMetadata_GetOwnerReference{Call: c}
}

// GetOwnerReference provides a mock function with given fields:
func (_m *NodeExecutionMetadata) GetOwnerReference() v1.OwnerReference {
	ret := _m.Called()

	var r0 v1.OwnerReference
	if rf, ok := ret.Get(0).(func() v1.OwnerReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.OwnerReference)
	}

	return r0
}
