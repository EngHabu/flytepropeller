// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import events "github.com/lyft/flyteidl/clients/go/events"
import handler "github.com/lyft/flytepropeller/pkg/controller/nodes/handler"
import io "github.com/lyft/flyteplugins/go/tasks/pluginmachinery/io"
import mock "github.com/stretchr/testify/mock"
import storage "github.com/lyft/flytestdlib/storage"
import v1alpha1 "github.com/lyft/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"

// NodeExecutionContext is an autogenerated mock type for the NodeExecutionContext type
type NodeExecutionContext struct {
	mock.Mock
}

// CurrentAttempt provides a mock function with given fields:
func (_m *NodeExecutionContext) CurrentAttempt() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// DataStore provides a mock function with given fields:
func (_m *NodeExecutionContext) DataStore() *storage.DataStore {
	ret := _m.Called()

	var r0 *storage.DataStore
	if rf, ok := ret.Get(0).(func() *storage.DataStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.DataStore)
		}
	}

	return r0
}

// EnqueueOwnerFunc provides a mock function with given fields:
func (_m *NodeExecutionContext) EnqueueOwnerFunc() func() error {
	ret := _m.Called()

	var r0 func() error
	if rf, ok := ret.Get(0).(func() func() error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func() error)
		}
	}

	return r0
}

// EventsRecorder provides a mock function with given fields:
func (_m *NodeExecutionContext) EventsRecorder() events.TaskEventRecorder {
	ret := _m.Called()

	var r0 events.TaskEventRecorder
	if rf, ok := ret.Get(0).(func() events.TaskEventRecorder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(events.TaskEventRecorder)
		}
	}

	return r0
}

// InputReader provides a mock function with given fields:
func (_m *NodeExecutionContext) InputReader() io.InputReader {
	ret := _m.Called()

	var r0 io.InputReader
	if rf, ok := ret.Get(0).(func() io.InputReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.InputReader)
		}
	}

	return r0
}

// MaxDatasetSizeBytes provides a mock function with given fields:
func (_m *NodeExecutionContext) MaxDatasetSizeBytes() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Node provides a mock function with given fields:
func (_m *NodeExecutionContext) Node() v1alpha1.ExecutableNode {
	ret := _m.Called()

	var r0 v1alpha1.ExecutableNode
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutableNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableNode)
		}
	}

	return r0
}

// NodeExecutionMetadata provides a mock function with given fields:
func (_m *NodeExecutionContext) NodeExecutionMetadata() handler.NodeExecutionMetadata {
	ret := _m.Called()

	var r0 handler.NodeExecutionMetadata
	if rf, ok := ret.Get(0).(func() handler.NodeExecutionMetadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(handler.NodeExecutionMetadata)
		}
	}

	return r0
}

// NodeID provides a mock function with given fields:
func (_m *NodeExecutionContext) NodeID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NodeStateReader provides a mock function with given fields:
func (_m *NodeExecutionContext) NodeStateReader() handler.NodeStateReader {
	ret := _m.Called()

	var r0 handler.NodeStateReader
	if rf, ok := ret.Get(0).(func() handler.NodeStateReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(handler.NodeStateReader)
		}
	}

	return r0
}

// NodeStateWriter provides a mock function with given fields:
func (_m *NodeExecutionContext) NodeStateWriter() handler.NodeStateWriter {
	ret := _m.Called()

	var r0 handler.NodeStateWriter
	if rf, ok := ret.Get(0).(func() handler.NodeStateWriter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(handler.NodeStateWriter)
		}
	}

	return r0
}

// NodeStatus provides a mock function with given fields:
func (_m *NodeExecutionContext) NodeStatus() v1alpha1.ExecutableNodeStatus {
	ret := _m.Called()

	var r0 v1alpha1.ExecutableNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutableNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableNodeStatus)
		}
	}

	return r0
}

// TaskReader provides a mock function with given fields:
func (_m *NodeExecutionContext) TaskReader() handler.TaskReader {
	ret := _m.Called()

	var r0 handler.TaskReader
	if rf, ok := ret.Get(0).(func() handler.TaskReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(handler.TaskReader)
		}
	}

	return r0
}

// Workflow provides a mock function with given fields:
func (_m *NodeExecutionContext) Workflow() v1alpha1.ExecutableWorkflow {
	ret := _m.Called()

	var r0 v1alpha1.ExecutableWorkflow
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutableWorkflow); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableWorkflow)
		}
	}

	return r0
}
