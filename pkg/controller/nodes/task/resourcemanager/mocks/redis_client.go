// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	redis "github.com/go-redis/redis"
	mock "github.com/stretchr/testify/mock"
)

// RedisClient is an autogenerated mock type for the RedisClient type
type RedisClient struct {
	mock.Mock
}

type RedisClient_Ping struct {
	*mock.Call
}

func (_m RedisClient_Ping) Return(_a0 *redis.StatusCmd) *RedisClient_Ping {
	return &RedisClient_Ping{Call: _m.Call.Return(_a0)}
}

func (_m *RedisClient) OnPing() *RedisClient_Ping {
	c := _m.On("Ping")
	return &RedisClient_Ping{Call: c}
}

func (_m *RedisClient) OnPingMatch(matchers ...interface{}) *RedisClient_Ping {
	c := _m.On("Ping", matchers...)
	return &RedisClient_Ping{Call: c}
}

// Ping provides a mock function with given fields:
func (_m *RedisClient) Ping() *redis.StatusCmd {
	ret := _m.Called()

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func() *redis.StatusCmd); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

type RedisClient_SAdd struct {
	*mock.Call
}

func (_m RedisClient_SAdd) Return(_a0 *redis.IntCmd) *RedisClient_SAdd {
	return &RedisClient_SAdd{Call: _m.Call.Return(_a0)}
}

func (_m *RedisClient) OnSAdd(_a0 string, _a1 interface{}) *RedisClient_SAdd {
	c := _m.On("SAdd", _a0, _a1)
	return &RedisClient_SAdd{Call: c}
}

func (_m *RedisClient) OnSAddMatch(matchers ...interface{}) *RedisClient_SAdd {
	c := _m.On("SAdd", matchers...)
	return &RedisClient_SAdd{Call: c}
}

// SAdd provides a mock function with given fields: _a0, _a1
func (_m *RedisClient) SAdd(_a0 string, _a1 interface{}) *redis.IntCmd {
	ret := _m.Called(_a0, _a1)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(string, interface{}) *redis.IntCmd); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

type RedisClient_SCard struct {
	*mock.Call
}

func (_m RedisClient_SCard) Return(_a0 *redis.IntCmd) *RedisClient_SCard {
	return &RedisClient_SCard{Call: _m.Call.Return(_a0)}
}

func (_m *RedisClient) OnSCard(_a0 string) *RedisClient_SCard {
	c := _m.On("SCard", _a0)
	return &RedisClient_SCard{Call: c}
}

func (_m *RedisClient) OnSCardMatch(matchers ...interface{}) *RedisClient_SCard {
	c := _m.On("SCard", matchers...)
	return &RedisClient_SCard{Call: c}
}

// SCard provides a mock function with given fields: _a0
func (_m *RedisClient) SCard(_a0 string) *redis.IntCmd {
	ret := _m.Called(_a0)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(string) *redis.IntCmd); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

type RedisClient_SIsMember struct {
	*mock.Call
}

func (_m RedisClient_SIsMember) Return(_a0 *redis.BoolCmd) *RedisClient_SIsMember {
	return &RedisClient_SIsMember{Call: _m.Call.Return(_a0)}
}

func (_m *RedisClient) OnSIsMember(_a0 string, _a1 interface{}) *RedisClient_SIsMember {
	c := _m.On("SIsMember", _a0, _a1)
	return &RedisClient_SIsMember{Call: c}
}

func (_m *RedisClient) OnSIsMemberMatch(matchers ...interface{}) *RedisClient_SIsMember {
	c := _m.On("SIsMember", matchers...)
	return &RedisClient_SIsMember{Call: c}
}

// SIsMember provides a mock function with given fields: _a0, _a1
func (_m *RedisClient) SIsMember(_a0 string, _a1 interface{}) *redis.BoolCmd {
	ret := _m.Called(_a0, _a1)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(string, interface{}) *redis.BoolCmd); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

type RedisClient_SRem struct {
	*mock.Call
}

func (_m RedisClient_SRem) Return(_a0 *redis.IntCmd) *RedisClient_SRem {
	return &RedisClient_SRem{Call: _m.Call.Return(_a0)}
}

func (_m *RedisClient) OnSRem(_a0 string, _a1 interface{}) *RedisClient_SRem {
	c := _m.On("SRem", _a0, _a1)
	return &RedisClient_SRem{Call: c}
}

func (_m *RedisClient) OnSRemMatch(matchers ...interface{}) *RedisClient_SRem {
	c := _m.On("SRem", matchers...)
	return &RedisClient_SRem{Call: c}
}

// SRem provides a mock function with given fields: _a0, _a1
func (_m *RedisClient) SRem(_a0 string, _a1 interface{}) *redis.IntCmd {
	ret := _m.Called(_a0, _a1)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(string, interface{}) *redis.IntCmd); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}
