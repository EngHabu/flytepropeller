// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/lyft/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// WorkflowReader is an autogenerated mock type for the WorkflowReader type
type WorkflowReader struct {
	mock.Mock
}

type WorkflowReader_Read struct {
	*mock.Call
}

func (_m WorkflowReader_Read) Return(_a0 v1alpha1.ExecutableSubWorkflow, _a1 error) *WorkflowReader_Read {
	return &WorkflowReader_Read{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *WorkflowReader) OnRead(ctx context.Context) *WorkflowReader_Read {
	c := _m.On("Read", ctx)
	return &WorkflowReader_Read{Call: c}
}

func (_m *WorkflowReader) OnReadMatch(matchers ...interface{}) *WorkflowReader_Read {
	c := _m.On("Read", matchers...)
	return &WorkflowReader_Read{Call: c}
}

// Read provides a mock function with given fields: ctx
func (_m *WorkflowReader) Read(ctx context.Context) (v1alpha1.ExecutableSubWorkflow, error) {
	ret := _m.Called(ctx)

	var r0 v1alpha1.ExecutableSubWorkflow
	if rf, ok := ret.Get(0).(func(context.Context) v1alpha1.ExecutableSubWorkflow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableSubWorkflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
